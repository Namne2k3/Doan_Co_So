@using Microsoft.AspNetCore.Identity

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - Doan_Web_CK</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/Doan_Web_CK.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
</head>
<body>
    <div class="d-flex flex-column h-100">
        <div class="nav_container h-100">
            <div class="navIcons col-md-3 bg-dark justify-content-between d-flex flex-column" style="border-right: 1px solid #ccc">
                @RenderSection("NavContent", required: true)
                @if (!SignInManager.IsSignedIn(User))
                {
                    <partial hidden name="_LoginPartial" />
                }
            </div>
            <div class="body_section col-md-9 text-white" style="background-color: #212529">
                <main role="main" class="pb-3 m-4">
                    @RenderBody()
                </main>
            </div>
        </div>
        <footer class="border-top footer text-muted bg-dark">
            <div class="container">
                &copy; 2024 - Doan_Web_CK - <a asp-area="" asp-controller="Home" asp-action="Privacy">Privacy</a>
            </div>
        </footer>
    </div>

    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>

<script>
    $(document).ready(function () {
        var screenWidth = $(window).width();
        var screenHeight = $(window).height();
        console.log("Check width"+screenWidth)
        
        var ele = document.getElementById('nof_icon_container');
       
        if (screenWidth > 550) {
            ele.innerHTML = `
                <a onclick="handleToggleNofs()" id="navNofitication" class="nof_icon text-center">
                    <i class="navIcon icon bi bi-bell-fill"></i>
                    <p class="navTitle w-75 fs-4 text-start my-auto">Nofitications</p>
                </a>
            `
        }
    });

    function reloadAllNof(userId) {
        fetch(`/Profile/GetReloadNofs?userId=${userId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // xử lý dữ liệu trả về
                console.log(data.newHtml);
                // cập nhật giao diện người dùng với dữ liệu mới
                var element = document.getElementById("nav_item_nofitications_container")
                if (element) {
                    element.innerHTML = '';
                    element.innerHTML = data.newHtml
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }

    function handleToggleNofs() {
        var element = document.getElementById("nav_item_nofitications");
        if (element.classList.contains("hidden")) {
            element.classList.remove('hidden');
        } else {
            element.classList.add("hidden");
        }
    }
    function handleAccept(userId, nofId) {
        fetch(`/Profile/AcceptFriendRequest?userId=${userId}&nofId=${nofId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // xử lý dữ liệu trả về
                console.log(data.commentHtml);
                // cập nhật giao diện người dùng với dữ liệu mới
                var element = document.getElementById("nofi_card_actions_" + nofId);
                if (element) {
                    element.innerHTML = '';
                    element.innerHTML = data.newHtml;
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
    function handleDeny(userId, nofId) {
        fetch(`/Profile/DenyFriendRequest?userId=${userId}&nofId=${nofId}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // xử lý dữ liệu trả về
                console.log(data.commentHtml);
                // cập nhật giao diện người dùng với dữ liệu mới
                var element = document.getElementById("nofi_card_actions_" + nofId);
                if (element) {
                    element.innerHTML = '';
                    element.innerHTML = data.newHtml;
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
    function handleAddFriend(userId, blogId) {
        console.log(userId.trim());
        console.log(blogId);

        var formData = new FormData(document.getElementById("form_add_friend_" + blogId));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/AddFriend", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    if (response) {
                        console.log("CHECK response >>> ", response)
                        var element = document.getElementById("right_click_menu_container_"+ blogId)
                        if (element) {
                            element.innerHTML = '';
                            element.innerHTML = response.newHtml;
                        }
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleRightClick(id) {
        event.preventDefault();
        var element = document.getElementById("right_click_menu_" + id);
        if (element.classList.contains("hidden")) {
            element.classList.remove("hidden")
        } else {
            element.classList.add("hidden")
        }

    }
    function handleShareBlog(id) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("share_form_" + id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/ShareBlog", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    if (response) {
                        console.log("CHECK response >>> ", response)
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleToggleShareActions(id) {
        var element = document.getElementById("share_actions_"+id)
        if (element.classList.contains("hidden")) {
            element.classList.remove("hidden");
        } else {
            element.classList.add("hidden")
        }
    }
    function handleToggleLike(id) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("like_form_" + id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/AddLike", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    if (response) {
                        console.log("CHECK response >>> ", response)
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    let isDisplayAllCmt = true
    function handleLoadAllComments(blogId) {
        console.log("Typeof isDisplayAllCmt >>> ", typeof (isDisplayAllCmt))
        fetch(`/Blog/GetAllCommentsOfBlogs?blogId=${blogId}&isDisplayAllCmt=${isDisplayAllCmt}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // xử lý dữ liệu trả về
                console.log(data.commentHtml);
                // cập nhật giao diện người dùng với dữ liệu mới
                var commentContainer = document.getElementById("comment_container_lower_" + blogId);
                if (commentContainer) {
                    commentContainer.innerHTML = '';
                    commentContainer.innerHTML = data.commentHtml;
                    isDisplayAllCmt = !isDisplayAllCmt;
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
    function handleChangeIcon(id) {
        var icon = document.getElementById("like_icon_"+id);
        if (!icon.classList.contains("bi-heart-fill")) {
            icon.classList.remove("bi-heart")
            icon.classList.add("bi-heart-fill")
        } else {
            icon.classList.remove("bi-heart-fill")
            icon.classList.add("bi-heart")
        }
    }
    function handleToggleUnLike(id) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("like_form_" + id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/UnLike", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    if (response) {
                        console.log("CHECK response >>> ", response)
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleUnLike(id) {
        handleChangeIcon(id)

        let element = document.getElementById("action_like_" + id)
        console.log(element);
        element.onclick = function () { 
            handleLike(id)
        }
        console.log(element);

        handleToggleUnLike(id)
    }
    function handleLike(id) {
        handleChangeIcon(id)

        let element = document.getElementById("action_like_"+id)
        console.log(element);
        element.onclick = function () {
            handleUnLike(id)
        }
        console.log(element);
        handleToggleLike(id)
    }
    
    function handlePreviewPhoto() {
        console.log("Da chay")
        if (!this.files || !this.files[0]) return;

        const FR = new FileReader();
        var img = document.getElementById('profile_photo');

        FR.addEventListener("load", function (evt) {
            img.src = evt.target.result;
        });

        console.log("Check >>> ", img.src)

        FR.readAsDataURL(this.files[0]);

        if (document.getElementById("profile_photo_input").value != "") {
            console.log("Chay lan hai")
            document.getElementById("saveChange_button").classList.remove("hidden")
            document.getElementById("saveChange_button").classList.add("flex")
        } else {
            console.log("Chay lan dau")
            document.getElementById("saveChange_button").classList.remove("flex")
            document.getElementById("saveChange_button").classList.add("hidden")
        }
    }
    function syncInputs(value, targetId) {
        var targetInput = document.getElementById(targetId);
        targetInput.value = value;
        console.log("dang chay syncinput")
    }
    
    function handleEdituserName() {
        var input_username = document.getElementById("input_username_edit")
        if (!input_username.classList.contains("hidden")) {
            document.getElementById("saveChange_button").classList.remove("hidden")
            document.getElementById("saveChange_button").classList.add("flex")
        } else {
            document.getElementById("saveChange_button").classList.remove("flex")
            document.getElementById("saveChange_button").classList.add("hidden")
        }
        console.log("dang chay handleEdituserName")
    }
    function toogleEditUsername() {
        var h1 = document.getElementById("user_name_h1");
        var input_username = document.getElementById("input_username_edit")
        if (!h1.classList.contains("hidden")) {
            h1.classList.add("hidden")
            input_username.classList.remove("hidden")
        }
        document.getElementById("saveChange_button").classList.remove("hidden")
        document.getElementById("saveChange_button").classList.add("flex")

    }
    function handleEditToggleComment(id) {
        
        var form = document.getElementById("comment_form_"+id)
        var p = document.getElementById("p_content_" + id);
        if ( !p.classList.contains("hidden") ) {
            p.classList.add("hidden");
            form.classList.remove("hidden");
            form.focus();
        } else {
            p.classList.remove("hidden")
            form.classList.add("hidden")
        }
    }
    function toggleActionComment(id) {
        var element = document.getElementById("comments_actions_"+id)
        if (element.classList.contains("hidden")) {
            element.classList.remove("hidden");
        } else {
            element.classList.add("hidden");
        }
    }
    function handleSubmitAddCmt(id) {
        event.preventDefault(); 
        var formData = new FormData(document.getElementById("form_comment_"+id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/AddComment", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);

                    // Cập nhật nội dung của phần tử commentContainer
                    document.getElementById("form_input_comment_" + id).value = ""
                    var commentContainer = document.getElementById("comment_container_lower_" + id);
                    if (commentContainer) {
                        commentContainer.innerHTML = '';
                        commentContainer.innerHTML = response.commentHtml;
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleToggleMore(id) {
        console.log(id)
        const element = document.getElementById("content_"+id);
        const toggle_icon = document.getElementById("toggle_icon_"+id)
        var parentElement = element.parentElement
        if (element.classList.contains("temp_hidden")) {
            console.log("Da xoa")
            element.classList.remove("temp_hidden")
            toggle_icon.classList.remove("bi-arrow-down-circle")
            toggle_icon.classList.add("bi-arrow-up-circle")

        } else {
            console.log("Da them")
            parentElement.scrollIntoView({ behavior: 'smooth' })
            element.classList.add("temp_hidden")
            // scroll execute
            console.log("da chay scroll")
            toggle_icon.classList.remove("bi-arrow-up-circle")
            toggle_icon.classList.add("bi-arrow-down-circle")
        }
    }
   
    function handleToggle(id) {
        var element = document.getElementById(id);
        if (element.classList.contains("hidden")) {
            element.classList.remove("hidden");
            element.classList.add("flex");
        } else {
            element.classList.add("hidden");
            element.classList.remove("flex");
        }
    }
    function handleSubmitEditCmt(id, cmtId) {
        event.preventDefault();
        console.log("Check cmtid >>> " , cmtId)
        var formData = new FormData(document.getElementById("edit_form_cmt_" + cmtId));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/UpdateComment", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);

                    var commentContainer = document.getElementById("comment_container_lower_" + id);
                    if (commentContainer) {
                        commentContainer.innerHTML = '';
                        commentContainer.innerHTML = response.commentHtml;
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleKeyPressInputEditComment(event, id, commentId) {
        if (event.key === 'Enter') {
            handleSubmitEditCmt(id,commentId)

            console.log("Check" + commentId);
            handleEditToggleComment(commentId)
        }
    }

    function handleKeyPress(event, id) {
        // Kiểm tra xem phím được nhấn có phải là phím Enter không
        if (event.key === "Enter") {
            // Xử lý sự kiện tại đây, ví dụ: gọi một hàm JavaScript hoặc thực hiện một hành động khác
            handleSubmitAddCmt(id)
        }
        return false;
    }

    function handleToggleFilter() {
        
        var element = document.getElementById("filter_modal");
        if (element) {
            if (element.classList.contains("hidden")) {
                element.classList.remove("hidden");
                element.classList.add("block");
            } else {
                element.classList.add("hidden");
                element.classList.remove("block");
            }
        }
    }

</script>
