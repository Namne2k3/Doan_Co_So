@model Doan_Web_CK.Models.Blog
@using Microsoft.AspNetCore.Identity
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Details";
    var currentUser = ViewBag.CurrentUser;
}

<div class="my-3">
    <a class="btn btn-outline-light" asp-action="Index">Back to Blogs</a>
</div>

<div class="blog_card">
    <div class="blog_userInfo">
        <div class="blog_img_date">
            <div class="d-flex align-items-end">
                <div style="width: 65px; height: 65px;">
                    <img src="@(ViewBag.GetPhotoById(Model.AccountId))"
                         class="w-100 h-100 photo_image_border"
                         style="border-radius: 100%; object-fit: cover;"
                         alt="user_profile image" />
                </div>
                <p class="blog_username mb-0 fw-bold">@(ViewBag.GetUserName(Model.AccountId))</p>
            </div>
            <p class="mt-2">
                Publish at: @Model.PublishDate.ToShortDateString()
            </p>
        </div>

        @if (currentUser?.Id == Model.AccountId)
        {
            <div style="position: relative;">
                <a class="text-white" href="#" onclick="handleToggle(@Model.Id)">
                    <i style="font-size: 32px;" class="bi bi-three-dots-vertical"></i>
                </a>
                <div id="@Model.Id" class="hidden actions_ud" style="top:-10px; right: 20px; position: absolute; background-color: #282b2d; padding: 16px; border-radius: 12px 12px 0 0;" aria-hidden="true">
                    <a asp-controller="Blog" asp-route-id="@Model.Id" asp-action="Edit" class="btn btn-outline-light">Edit</a>
                    <a class="btn btn-outline-light">Delete</a>
                </div>
            </div>
        }
    </div>
    <div class="heading">
        <div class="d-flex justify-content-between">
            <h1 style="max-width: 80%">@Model.Title</h1>
        </div>
        <p class="mt-4">@Model.Description</p>
    </div>

    <div class="BlogCard_Img">
        <img src="@Model.BlogImageUrl" />
    </div>

    <div id="content_@Model.Id" class="Blogcard_Content mt-4 temp_hidden">
        <p>@Html.Raw(@Model.Content.Replace("\n", "<br>"))</p>
    </div>

    <div class="toggle_more justify-content-center d-flex">
        <a onclick="handleToggleMore(@Model.Id)" >
            <i id="toggle_icon_@Model.Id" class="icon_up_down bi bi-arrow-down-circle text-white" style="font-size: 24px;"></i>
        </a>
    </div>

    <div class="blog_actions mt-2 d-flex flex-column">
        <div class="d-flex justify-content-around">

            <!-- Start Section likes action-->
            <div class="action_container">
                @if (ViewBag.IsCurrentUserLiked(Model.Id, currentUser?.Id) == true)
                {
                    <a onclick="handleUnLike(@Model.Id)" id="action_like_@Model.Id" class="actions_item">
                        <p>Like</p>
                        <i style="color: #c66b6b;" id="like_icon_@Model.Id" class="bi bi-heart-fill"></i>
                    </a>
                }
                else
                {
                    <a onclick="handleLike(@Model.Id)" id="action_like_@Model.Id" class="actions_item">
                        <p>Like</p>
                        <i style="color: #c66b6b;" id="like_icon_@Model.Id" class="bi bi-heart"></i>
                    </a>
                }
                <form id="like_form_@Model.Id" hidden method="post">
                    <input type="text" value="@currentUser?.Id" name="like_accountId" />
                    <input type="number" value="@Model.Id" name="like_blogId" />
                </form>
            </div>
            <!-- End Section likes action-->

            <div class="action_container">
                <label for="form_input_comment_@Model.Id" class="actions_item">
                    <p>Comment</p>
                    <i class="bi bi-chat"></i>
                </label>
            </div>
            <!-- Start Section share action-->
            <!-- Start Section share action-->
            @if (currentUser?.Id != Model.AccountId)
            {
                <div class="action_container position-relative">
                    <a onclick="handleToggleShareActions(@Model.Id)" class="actions_item">
                        <p>Share</p>
                        <i class="bi bi-share"></i>
                    </a>
                    <div id="share_actions_@Model.Id" class="share_actions hidden position-absolute">
                        <a onclick="handleShareBlog(@Model.Id)" class="btn btn-outline-light" >Share blog</a>
                    </div>

                    <form id="share_form_@Model.Id" hidden method="post" enctype="multipart/form-data">
                        <input value="@Model.Id" type="number" name="share_blog_refId" />
                        <input value="@currentUser?.Id" type="text" name="share_blog_accountId" />
                        <input value="@Model.Title" type="text" name="share_blog_title" />
                        <input value="@Model.Description" type="text" name="share_blog_desc" />
                        <textarea type="text" name="share_blog_content">@Model.Content</textarea>
                        <input type="text" value="@Model.BlogImageUrl" name="share_blog_imageUrl" />
                        <select name="share_blog_categoryId" itemid="@Model.CategoryId" asp-items="@ViewBag.Categories"></select>
                    </form>
                </div>
            }
            <!-- End Section share action-->
            <!-- End Section share action-->
        </div>
    </div>

    <div>
        <a onclick="handleLoadAllComments(@Model.Id)" class="btn btn-outline-dark text-white">All Comments</a>
    </div>

    <div class="comment_container">
        @if (currentUser != null)
        {
            <div class="comment_container_upper">
                <div class="user_photo_comment_container">
                    <img class="user_photo_comment" src="@(ViewBag.GetPhotoById(currentUser.Id))" />
                </div>

                @* <form id="form_comment_@item.Id" asp-action="AddComment" method="post"> *@
                <form id="form_comment_@Model.Id" method="post">
                    <input value="@Model.Id" type="number" hidden name="comment_blogid" />
                    <input value="@currentUser.Id" type="text" hidden name="comment_accountid" />
                    <input id="form_input_comment_@Model.Id" onkeypress="handleKeyPress(event, @Model.Id)" type="text" name="comment_content" style="background-color: #282b2d" class="form-control text-white" placeholder="Add comment..." />
                </form>
            </div>
        }
        @if (ViewBag.GetAllBlogComments(Model.Id) != null)
        {
            <div id="comment_container_lower_@Model.Id" class="comment_container_lower">
                @foreach (var comment in ViewBag.GetAllBlogComments(Model.Id))
                {
                    <div class="comment_card">
                        <div class="comment_card_img_container">
                            <img src="@(ViewBag.GetPhotoById(comment.AccountId))" class="comment_card_img" />
                        </div>
                        <div class="comment_card_content">
                            <p class="fw-bold">@(ViewBag.GetUserName(comment.AccountId)) <span class="comment_card_date">@comment.CommentDate</span> </p>
                            <p id="p_content_@comment.Id" class="fw-normal">@comment.Content</p>
                            <form method="post" id="edit_form_cmt_@comment.Id">
                                <input type="number" name="edit_cmt_id" hidden value="@comment.Id" />
                                <input type="text" name="edit_cmt_accountid" value="@comment.AccountId" hidden />
                                <input type="number" name="edit_cmt_blogid" value="@Model.Id" hidden />
                                <input onkeypress="handleKeyPressInputEditComment(event, @Model.Id, @comment.Id)" type="text" name="edit_cmt_content" value="@comment.Content" id="comment_form_@comment.Id" class="text-white hidden comments_inputs p-2" style="border: none;" />
                            </form>
                        </div>

                        <div class="comment_card_actions position-relative">
                            @if (comment.AccountId == currentUser?.Id)
                            {
                                <a onclick="toggleActionComment(@comment.Id)" class="text-white">
                                    <i class="bi bi-three-dots-vertical"></i>
                                </a>
                            }

                            <div id="comments_actions_@comment.Id" class="comments_actions hidden">
                                <a onclick="handleEditToggleComment(@comment.Id)" class="btn btn-outline-light">Edit</a>
                                <a class="btn btn-outline-light">Delete</a>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>
<script>
    function handleShareBlog(id) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("share_form_" + id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/ShareBlog", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    if (response) {
                        console.log("CHECK response >>> ", response)
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleToggleShareActions(id) {
        var element = document.getElementById("share_actions_" + id)
        if (element.classList.contains("hidden")) {
            element.classList.remove("hidden");
        } else {
            element.classList.add("hidden")
        }
    }

    let isDisplayAllCmt = true
    function handleLoadAllComments(blogId) {
        console.log("Typeof isDisplayAllCmt >>> ", typeof (isDisplayAllCmt))
        fetch(`/Blog/GetAllCommentsOfBlogs?blogId=${blogId}&isDisplayAllCmt=${isDisplayAllCmt}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // xử lý dữ liệu trả về
                console.log(data.commentHtml);
                // cập nhật giao diện người dùng với dữ liệu mới
                var commentContainer = document.getElementById("comment_container_lower_" + blogId);
                if (commentContainer) {
                    commentContainer.innerHTML = '';
                    commentContainer.innerHTML = data.commentHtml;
                    isDisplayAllCmt = !isDisplayAllCmt;
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
    function handleToggleLike(id) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("like_form_" + id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/AddLike", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    if (response) {
                        console.log("CHECK response >>> ", response)
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleChangeIcon(id) {
        var icon = document.getElementById("like_icon_" + id);
        if (!icon.classList.contains("bi-heart-fill")) {
            icon.classList.remove("bi-heart")
            icon.classList.add("bi-heart-fill")
        } else {
            icon.classList.remove("bi-heart-fill")
            icon.classList.add("bi-heart")
        }
    }
    function handleToggleUnLike(id) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("like_form_" + id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/UnLike", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    if (response) {
                        console.log("CHECK response >>> ", response)
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleUnLike(id) {
        handleChangeIcon(id)

        let element = document.getElementById("action_like_" + id)
        console.log(element);
        element.onclick = function () {
            handleLike(id)
        }
        console.log(element);

        handleToggleUnLike(id)
    }
    function handleLike(id) {
        handleChangeIcon(id)

        let element = document.getElementById("action_like_" + id)
        console.log(element);
        element.onclick = function () {
            handleUnLike(id)
        }
        console.log(element);
        handleToggleLike(id)
    }

    function handleEditToggleComment(id) {

        var form = document.getElementById("comment_form_" + id)
        var p = document.getElementById("p_content_" + id);
        if (!p.classList.contains("hidden")) {
            p.classList.add("hidden");
            form.classList.remove("hidden");
            form.focus();
        } else {
            p.classList.remove("hidden")
            form.classList.add("hidden")
        }
    }
    function toggleActionComment(id) {
        var element = document.getElementById("comments_actions_" + id)
        if (element.classList.contains("hidden")) {
            element.classList.remove("hidden");
        } else {
            element.classList.add("hidden");
        }
    }
    function handleSubmitAddCmt(id) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("form_comment_" + id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/AddComment", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);

                    // Cập nhật nội dung của phần tử commentContainer
                    document.getElementById("form_input_comment_" + id).value = ""
                    var commentContainer = document.getElementById("comment_container_lower_" + id);
                    if (commentContainer) {
                        commentContainer.innerHTML = '';
                        commentContainer.innerHTML = response.commentHtml;
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleToggleMore(id) {
        console.log(id)
        const element = document.getElementById("content_" + id);
        const toggle_icon = document.getElementById("toggle_icon_" + id)
        var parentElement = element.parentElement
        if (element.classList.contains("temp_hidden")) {
            console.log("Da xoa")
            element.classList.remove("temp_hidden")
            toggle_icon.classList.remove("bi-arrow-down-circle")
            toggle_icon.classList.add("bi-arrow-up-circle")

        } else {
            console.log("Da them")
            parentElement.scrollIntoView({ behavior: 'smooth' })
            element.classList.add("temp_hidden")
            // scroll execute
            console.log("da chay scroll")
            toggle_icon.classList.remove("bi-arrow-up-circle")
            toggle_icon.classList.add("bi-arrow-down-circle")
        }
    }

    function handleToggle(id) {
        var element = document.getElementById(id);
        if (element.classList.contains("hidden")) {
            element.classList.remove("hidden");
            element.classList.add("flex");
        } else {
            element.classList.add("hidden");
            element.classList.remove("flex");
        }
    }
    function handleSubmitEditCmt(id, cmtId) {
        event.preventDefault();
        console.log("Check cmtid >>> ", cmtId)
        var formData = new FormData(document.getElementById("edit_form_cmt_" + cmtId));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/UpdateComment", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);

                    var commentContainer = document.getElementById("comment_container_lower_" + id);
                    if (commentContainer) {
                        commentContainer.innerHTML = '';
                        commentContainer.innerHTML = response.commentHtml;
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleKeyPressInputEditComment(event, id, commentId) {
        if (event.key === 'Enter') {
            handleSubmitEditCmt(id, commentId)

            console.log("Check" + commentId);
            handleEditToggleComment(commentId)
        }
    }

    function handleKeyPress(event, id) {
        // Kiểm tra xem phím được nhấn có phải là phím Enter không
        if (event.key === "Enter") {
            // Xử lý sự kiện tại đây, ví dụ: gọi một hàm JavaScript hoặc thực hiện một hành động khác
            handleSubmitAddCmt(id)
        }
        return false;
    }
    function handleToggleFilter() {
        console.log("Dang chay")
        var element = document.getElementById("filter_modal");
        if (element) {
            if (element.classList.contains("hidden")) {
                element.classList.remove("hidden");
                element.classList.add("block");
            } else {
                element.classList.add("hidden");
                element.classList.remove("block");
            }
        }
    }
</script>
