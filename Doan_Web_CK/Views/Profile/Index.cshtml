@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Mvc;
@using Microsoft.AspNetCore.Mvc.Rendering;

@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    var account = ViewBag.Account;
    var blogList = ViewBag.blogList;
    var currentUser = ViewBag.currentUser;
}

<div class="body_container">
    <div class="d-flex flex-column gap-4 p-3 profile_container">
        <div class="d-flex profile_header gap-4 align-items-center">
            <div class="profile_photo position-relative">
                <div class="profile_img_container">
                    <img style="border-radius: 100%;" id="profile_photo" class="w-100 photo_image_border" src="@account.ImageUrl" />
                </div>
                @if ( currentUser.Id == account.Id )
                {
                    <div class="profile_changePhoto position-absolute top-0 w-100 h-100 justify-content-center align-items-center">
                        <a class="w-100">
                            <label for="profile_photo_input">
                                <i class="profile_icon bi bi-camera"></i>
                            </label>
                        </a>
                    </div>
                }
            </div>

            <div class="d-flex flex-column profile_info">
                <div class="d-flex gap-4 align-items-center">
                    <h1 id="user_name_h1" class="profile_username mw-100">
                        @account.UserName
                    </h1>
                    <input type="text" oninput="syncInputs(this.value,'input2')" style="min-width: 100%; font-size: 1.4rem; background-color: #282b2d; margin-bottom: 8px;" value="@account.UserName" id="input_username_edit" class="hidden w-100 form-control text-white" />
                    @if ( currentUser.Id == account.Id )
                    {
                        <a onclick="toogleEditUsername()" class="text-white hover_class">
                            <i class="pen_icon bi bi-pen"></i>
                        </a>
                    }
                </div>
                <p class="profile_date fst-italic">Date created: @account.DateCreated.ToShortDateString()</p
            </div>
        </div>
    </div>

    @if ( currentUser.Id == account.Id )
    {
        <div class="flex-column justify-content-end" id="saveChange_button">
            <form asp-action="Edit" method="Post" enctype="multipart/form-data">
                <input value="@account.ImageUrl" name="profile_photo" hidden type="file" accept="image/*" id="profile_photo_input" />
                <input value="@account.UserName" onchange="handleEdituserName()" name="user_name" hidden type="text" id="input2" />
                <button type="submit" class="btn btn-outline-light">Save Changes</button>
            </form>
        </div>

        <div class="partial_section">
            <partial name="_LoginPartial" />
        </div>
    } 
    @if ( currentUser.Id == account.Id )
    {
        <h1>My Blogs</h1>
    } else
    {
        <h1>Blogs</h1>
    }
    <div class="blog_container">
        @if (blogList.Count != 0 )
        {
            @foreach (var item in blogList)
            {
                <div class="blog_card">
                    <div class="blog_userInfo">
                        <div class="blog_img_date">
                            <div class="d-flex align-items-end">
                                <div style="width: 65px; height: 65px;">
                                    <img src="@(ViewBag.GetPhotoById(item.AccountId))"
                                            class="w-100 h-100 photo_image_border"
                                            style="border-radius: 100%; object-fit: cover;"
                                        alt="user_profile image"
                                    />
                                </div>
                                <p class="blog_username mb-0 fw-bold">@(ViewBag.GetUserName(item.AccountId))</p>
                            </div>
                             @if ( item.ReferenceId == null )
                            {
                                <p class="mt-2">
                                    Publish at: @item.PublishDate.ToShortDateString()
                                </p>
                            } else
                            {
                                <p class="mt-2">
                                    Shared <a asp-action="Details" asp-controller="Blog" asp-route-id="@item.ReferenceId" class="text-white">@ViewBag.GetUserNameByBlogId(item.ReferenceId)</a>'s post - @item.PublishDate.ToShortDateString()
                                </p>
                            }
                        </div>

                        @if (currentUser?.Id == item.AccountId)
                        {
                            <div style="position: relative;">
                                <a class="text-white" href="#" onclick="handleToggle(@item.Id)">
                                    <i style="font-size: 32px;" class="bi bi-three-dots-vertical"></i>
                                </a>
                                <div id="@item.Id" class="hidden actions_ud" style="top:-10px; right: 20px; position: absolute; background-color: #282b2d; padding: 16px; border-radius: 12px 12px 0 0;" aria-hidden="true">
                                    <a asp-controller="Blog" asp-route-id="@item.Id" asp-action="Edit" class="btn btn-outline-light">Edit</a>
                                    <a class="btn btn-outline-light">Delete</a>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="heading">
                        <div class="d-flex justify-content-between">
                            <h1 style="max-width: 80%">@item.Title</h1>
                        </div>
                        <p class="mt-4">@item.Description</p>
                    </div>

                    <div class="BlogCard_Img">
                        <img src="@item.BlogImageUrl" />
                    </div>

                    <div id="content_@item.Id" class="Blogcard_Content mt-4 temp_hidden">
                        <p>@Html.Raw(item.Content.Replace("\n", "<br>"))</p>
                    </div>

                    <div class="toggle_more justify-content-center d-flex">
                        <a onclick="handleToggleMore(@item.Id)" href="#">
                            <i id="toggle_icon_@item.Id" class="icon_up_down bi bi-arrow-down-circle text-white" style="font-size: 24px;"></i>
                        </a>
                    </div>

                    <div class="blog_actions mt-2 d-flex flex-column">
                        <div class="d-flex justify-content-around">
                            <div class="action_container">
                                @if ( ViewBag.IsCurrentUserLiked(item.Id, currentUser?.Id) == true )
                                        {
                                            <a onclick="handleUnLike(@item.Id)" id="action_like_@item.Id" href="#" class="actions_item">
                                                <p>Like</p>
                                                <i style="color: #c66b6b;" id="like_icon_@item.Id" class="bi bi-heart-fill"></i>
                                            </a>
                                        } else
                                        {
                                            <a onclick="handleLike(@item.Id)" id="action_like_@item.Id" href="#" class="actions_item">
                                                <p>Like</p>
                                                <i style="color: #c66b6b;" id="like_icon_@item.Id" class="bi bi-heart"></i>
                                            </a>
                                        }
                                    <form id="like_form_@item.Id" hidden method="post">
                                        <input type="text" value="@currentUser?.Id" name="like_accountId" />
                                        <input type="number" value="@item.Id" name="like_blogId" />
                                    </form>
                            </div>
                            <div class="action_container">
                                <label for="form_input_comment_@item.Id" class="actions_item">
                                    <p>Comment</p>
                                    <i class="bi bi-chat"></i>
                                </label>
                            </div>
                        </div>
                    </div>

                    <div>
                        <a onclick="handleLoadAllComments(@item.Id)" class="btn btn-outline-dark text-white">All Comments</a>
                    </div>
                    <div class="comment_container">
                        @if ( currentUser != null )
                        {
                            <div class="comment_container_upper">
                                <div class="user_photo_comment_container">
                                    <img class="user_photo_comment" src="@(ViewBag.GetPhotoById(currentUser.Id))" />
                                </div>

                                @* <form id="form_comment_@item.Id" asp-action="AddComment" method="post"> *@
                                <form id="form_comment_@item.Id" method="post">
                                    <input value="@item.Id" type="number" hidden name="comment_blogid"/>
                                    <input value="@currentUser.Id" type="text" hidden name="comment_accountid"/>
                                    <input id="form_input_comment_@item.Id" onkeypress="handleKeyPress(event, @item.Id)" type="text" name="comment_content" style="background-color: #282b2d" class="form-control text-white" placeholder="Add comment..." />
                                </form>
                            </div>
                            @if (ViewBag.GetAllBlogComments(item.Id) != null )
                            {
                                <div id="comment_container_lower_@item.Id" class="comment_container_lower">
                                    @foreach (var comment in ViewBag.GetAllBlogComments(item.Id))
                                    {
                                        <div class="comment_card">
                                            <div class="comment_card_img_container">
                                                <img src="@(ViewBag.GetPhotoById(comment.AccountId))" class="comment_card_img" />
                                            </div>
                                            <div class="comment_card_content">
                                                <p class="fw-bold">@(ViewBag.GetUserName(comment.AccountId)) <span class="comment_card_date">@comment.CommentDate</span> </p>
                                                <p id="p_content_@comment.Id" class="fw-normal">@comment.Content</p>
                                                <form method="post" id="edit_form_cmt_@comment.Id">
                                                    <input type="number" name="edit_cmt_id" hidden value="@comment.Id" />
                                                    <input type="text" name="edit_cmt_accountid" value="@comment.AccountId" hidden />
                                                    <input type="number" name="edit_cmt_blogid" value="@item.Id" hidden />
                                                    <input onkeypress="handleKeyPressInputEditComment(event, @item.Id, @comment.Id)" type="text" name="edit_cmt_content" value="@comment.Content" id="comment_form_@comment.Id" class="text-white hidden comments_inputs p-2" style="border: none;" />
                                                </form>
                                            </div>

                                            <div class="comment_card_actions position-relative">
                                                @if (comment.AccountId == currentUser.Id)
                                                {
                                                    <a onclick="toggleActionComment(@comment.Id)" href="#" class="text-white">
                                                        <i class="bi bi-three-dots-vertical"></i>
                                                    </a>
                                                }

                                                <div id="comments_actions_@comment.Id" class="comments_actions hidden">
                                                    <a onclick="handleEditToggleComment(@comment.Id)" class="btn btn-outline-light">Edit</a>
                                                    <a class="btn btn-outline-light">Delete</a>
                                                </div>
                                            </div>
                                        </div>
                                    } 
                                </div>
                            }
                        }
                    </div>
                </div>
                @*  <a class="text-decoration-none text-black" asp-controller="Blog" asp-action="Details" asp-route-id="@item.Id">
                    <div class="col">
                        <div class="card w-100">
                            <img src="@item.BlogImageUrl" class="card-img-top" alt="Blog Image">
                            <div class="card-body bg-dark text-white">
                                <h5 class="card-title">@item.Title</h5>
                                <p class="card-text">@LimitDescriptionLength(item.Description, 150)</p>
                            </div>
                        </div>
                    </div>
                </a> *@
            }
        }
        else
        {
            <h3></h3>
        }
    </div>
</div>
<style>
    .hidden {
        display: none!important;
    }
    .flex {
        display: flex;
    }
    .pen_icon {
        font-size: 18px;
        margin-left: 12px;
    }
    .hover_class:hover {
        opacity: 0.7;
    }
    .block {
        display: block;
    }
    .recently_post_container {
        display: flex;
        flex-direction: column;
        gap: 20px;
        padding: 0 16px 16px 16px;
        margin: 0 -16px -16px -16px;
    }
    .recent_card {
        background-color: #36393b;
        padding: 12px;
        border-radius: 12px;
        display: flex;
        transition: transform 0.2s; /* Animation */
        flex-direction: column;
        border: 1px solid #585b5d;
    }

    .recently_post_container {
        height: 100vh;
        overflow-y: scroll;
        scrollbar-width: none;
    }
    .recent_card:hover {
        transform: scale(1.1);
    }

    .recent_card a {
        color: #ccc;
        text-decoration: none;
    }

    .recent_card a:hover {
        opacity: 0.6;
    }

    .temp_hidden {
        max-height: 200px;
        overflow: hidden;
    }
    .comment_card_date {
        font-size: small;
        color: #ccc;
        font-weight: 300;
        font-style: italic;
    }
    .comments_inputs {
        background-color: #33373b;
    }
    .actions_item {
        display: flex;
        text-decoration: none;
        gap: 0.5rem;
        color: #fff;
    }
    .actions_item:hover {
        color: #ccc;
    }
    .comment_container {
        display: flex;
        gap: 12px;
        flex-direction: column;
        padding: 12px;
        border-radius: 12px;
        background-color: #212325;
    }
    .comment_container_upper {
        display: flex;
        gap: 12px;
        justify-content: center;
        align-items: center;
    }
    .comment_container_lower {
        display: flex;
        flex-direction: column;
        gap: 16px;
    }
    .comments_actions a {
        font-size: 12px;
    }
    .comments_actions {
        bottom: 0;
        left: 32px;
        position: absolute;
        background-color: #33373b; 
        border-radius: 12px;
        padding: 12px;
        display: flex;
        flex-direction: column;
        gap: 4px;
    }
    .comment_card {
        display: flex;
        gap: 6px;
    }

    .comment_card_img_container {
        width: 40px;
        height: 40px;
    }
    .comment_card_img {
        border: 1px solid #ccc;
        width: 100%;
        height: 100%;
        object-fit: cover;
        border-radius: 100%;
    }

    .comment_card_content {
        display: flex;
        flex-direction: column;
        gap: 2px;
        margin-left: 9px;
        background-color: #33373b;
        padding: 8px 12px;
        border-radius: 12px;
    }

    .comment_card_content p {
        margin: 0;
    }
    .comment_card_actions {
        display: flex;
        flex-direction: column;
        justify-content:center;
        align-items: center;
    }

    .comment_card_actions i {
        font-size:24px;
    }
    .comment_container form {
        width: 100%;
    }
    .comment_container input {
        width: 100%;
    }
    .user_photo_comment_container {
        width: 45px;
        height: 45px;
    }
    .user_photo_comment {
        width: 100%;
        height: 100%;
        border-radius: 100%;
        object-fit: cover;
    }
    .blog_actions {
        border-top: 1px solid #ccc;
        padding-top: 12px;
    }
    .action_container {
        display: flex;
        gap: 8px;
    }
    .action_container i {
        margin-top: 2px;
    }
</style>
<script>
    let isDisplayAllCmt = true
    function handleLoadAllComments(blogId) {
        console.log("Typeof isDisplayAllCmt >>> ", typeof (isDisplayAllCmt))
        fetch(`/Blog/GetAllCommentsOfBlogs?blogId=${blogId}&isDisplayAllCmt=${isDisplayAllCmt}`)
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                // xử lý dữ liệu trả về
                console.log(data.commentHtml);
                // cập nhật giao diện người dùng với dữ liệu mới
                var commentContainer = document.getElementById("comment_container_lower_" + blogId);
                if (commentContainer) {
                    commentContainer.innerHTML = '';
                    commentContainer.innerHTML = data.commentHtml;
                    isDisplayAllCmt = !isDisplayAllCmt;
                }
            })
            .catch(error => {
                console.error('There was a problem with the fetch operation:', error);
            });
    }
    function handleToggleLike(id) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("like_form_" + id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/AddLike", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    if (response) {
                        console.log("CHECK response >>> ", response)
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleChangeIcon(id) {
        var icon = document.getElementById("like_icon_"+id);
        if (!icon.classList.contains("bi-heart-fill")) {
            icon.classList.remove("bi-heart")
            icon.classList.add("bi-heart-fill")
        } else {
            icon.classList.remove("bi-heart-fill")
            icon.classList.add("bi-heart")
        }
    }
    function handleToggleUnLike(id) {
        event.preventDefault();
        var formData = new FormData(document.getElementById("like_form_" + id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/UnLike", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);
                    if (response) {
                        console.log("CHECK response >>> ", response)
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleUnLike(id) {
        handleChangeIcon(id)

        let element = document.getElementById("action_like_" + id)
        console.log(element);
        element.onclick = function () { 
            handleLike(id)
        }
        console.log(element);

        handleToggleUnLike(id)
    }
    function handleLike(id) {
        handleChangeIcon(id)

        let element = document.getElementById("action_like_"+id)
        console.log(element);
        element.onclick = function () {
            handleUnLike(id)
        }
        console.log(element);
        handleToggleLike(id)
    }
    function toogleEditUsername() {
        var h1 = document.getElementById("user_name_h1");
        var input_username = document.getElementById("input_username_edit")
        if (!h1.classList.contains("hidden"))
        {
            h1.classList.add("hidden")
            input_username.classList.remove("hidden")
        }
        document.getElementById("saveChange_button").classList.remove("hidden")
        document.getElementById("saveChange_button").classList.add("flex")
        
    }
    function handleEdituserName() {
        var input_username = document.getElementById("input_username_edit")
        if (!input_username.classList.contains("hidden")) {
            document.getElementById("saveChange_button").classList.remove("hidden")
            document.getElementById("saveChange_button").classList.add("flex")
        } else {
            document.getElementById("saveChange_button").classList.remove("flex")
            document.getElementById("saveChange_button").classList.add("hidden")
        }
        console.log("dang chay handleEdituserName")
    }
    function syncInputs(value, targetId) {
        var targetInput = document.getElementById(targetId);
        targetInput.value = value;
        console.log("dang chay syncinput")
    }
    function handlePreviewPhoto() {
        console.log("Da chay")
        if (!this.files || !this.files[0]) return;

        const FR = new FileReader();
        var img = document.getElementById('profile_photo');

        FR.addEventListener("load", function (evt) {
            img.src = evt.target.result;
        });

        console.log("Check >>> " , img.src)

        FR.readAsDataURL(this.files[0]);

        if (document.getElementById("profile_photo_input").value != "") 
        {
            console.log("Chay lan hai")
            document.getElementById("saveChange_button").classList.remove("hidden")
            document.getElementById("saveChange_button").classList.add("flex")
        } else {
            console.log("Chay lan dau")
            document.getElementById("saveChange_button").classList.remove("flex")
            document.getElementById("saveChange_button").classList.add("hidden")
        }
    }

    document.querySelector("#profile_photo_input").addEventListener("change", handlePreviewPhoto);

    if (!document.getElementById("profile_photo_input").value != "") 
    {
        console.log("Chay lan dau")
        document.getElementById("saveChange_button").classList.remove("flex")
        document.getElementById("saveChange_button").classList.add("hidden")
    }

    function handleEditToggleComment(id) {
        
        var form = document.getElementById("comment_form_"+id)
        var p = document.getElementById("p_content_" + id);
        if ( !p.classList.contains("hidden") ) {
            p.classList.add("hidden");
            form.classList.remove("hidden");
            form.focus();
        } else {
            p.classList.remove("hidden")
            form.classList.add("hidden")
        }
        
    }
    function toggleActionComment(id) {
        var element = document.getElementById("comments_actions_"+id)
        if (element.classList.contains("hidden")) {
            element.classList.remove("hidden");
        } else {
            element.classList.add("hidden");
        }
    }
    function handleSubmitAddCmt(id) {
        event.preventDefault(); 
        var formData = new FormData(document.getElementById("form_comment_"+id));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/AddComment", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);

                    // Cập nhật nội dung của phần tử commentContainer
                    document.getElementById("form_input_comment_" + id).value = ""
                    var commentContainer = document.getElementById("comment_container_lower_" + id);
                    if (commentContainer) {
                        commentContainer.innerHTML = '';
                        commentContainer.innerHTML = response.commentHtml;
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleToggleMore(id) {
        console.log(id)
        const element = document.getElementById("content_"+id);
        const toggle_icon = document.getElementById("toggle_icon_"+id)
        var parentElement = element.parentElement
        if (element.classList.contains("temp_hidden")) {
            console.log("Da xoa")
            element.classList.remove("temp_hidden")
            toggle_icon.classList.remove("bi-arrow-down-circle")
            toggle_icon.classList.add("bi-arrow-up-circle")

        } else {
            console.log("Da them")
            parentElement.scrollIntoView({ behavior: 'smooth' })
            element.classList.add("temp_hidden")
            // scroll execute
            console.log("da chay scroll")
            toggle_icon.classList.remove("bi-arrow-up-circle")
            toggle_icon.classList.add("bi-arrow-down-circle")
        }
    }
   
    function handleToggle(id) {
        var element = document.getElementById(id);
        if (element.classList.contains("hidden")) {
            element.classList.remove("hidden");
            element.classList.add("flex");
        } else {
            element.classList.add("hidden");
            element.classList.remove("flex");
        }
    }
    function handleSubmitEditCmt(id, cmtId) {
        event.preventDefault();
        console.log("Check cmtid >>> " , cmtId)
        var formData = new FormData(document.getElementById("edit_form_cmt_" + cmtId));
        var xhr = new XMLHttpRequest();
        xhr.open("POST", "/Blog/UpdateComment", true);
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest"); // Đảm bảo yêu cầu được nhận biết là AJAX
        xhr.onreadystatechange = function () {
            if (xhr.readyState === XMLHttpRequest.DONE) {
                if (xhr.status === 200) {
                    var response = JSON.parse(xhr.responseText);

                    var commentContainer = document.getElementById("comment_container_lower_" + id);
                    if (commentContainer) {
                        commentContainer.innerHTML = '';
                        commentContainer.innerHTML = response.commentHtml;
                    }
                } else {
                    // Xử lý lỗi
                }
            }
        };
        xhr.send(formData);
    }
    function handleKeyPressInputEditComment(event, id, commentId) {
        if (event.key === 'Enter') {
            handleSubmitEditCmt(id,commentId)

            console.log("Check" + commentId);
            handleEditToggleComment(commentId)
        }
    }

    function handleKeyPress(event, id) {
        // Kiểm tra xem phím được nhấn có phải là phím Enter không
        if (event.key === "Enter") {
            // Xử lý sự kiện tại đây, ví dụ: gọi một hàm JavaScript hoặc thực hiện một hành động khác
            handleSubmitAddCmt(id)
        }
        return false;
    }
    function handleToggleFilter() {
        console.log("Dang chay")
        var element = document.getElementById("filter_modal");
        if (element) {
            if (element.classList.contains("hidden")) {
                element.classList.remove("hidden");
                element.classList.add("block");
            } else {
                element.classList.add("hidden");
                element.classList.remove("block");
            }
        }
    }
</script>

@functions {
    
}
